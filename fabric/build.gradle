plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}")

    // for sodium compat
    modRuntimeOnly "maven.modrinth:sodium:mc1.18.2-0.4.1"
    modRuntimeOnly 'org.joml:joml:1.10.2' //temp sodium

    // for iris compat
    modRuntimeOnly "maven.modrinth:iris:1.6.5+1.18.2"
    modRuntimeOnly 'org.anarres:jcpp:1.4.14' //temp iris
    modRuntimeOnly 'io.github.douira:glsl-transformer:2.0.0-pre13' //temp iris

    // for REI compat
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:8.3.618"

    // for Pehkui compat
    modRuntimeOnly("com.github.Virtuoel:Pehkui:3.7.7", { exclude group: "net.fabricmc.fabric-api" })

    // other mods
    // modRuntimeOnly("com.simibubi.create:create-fabric-1.18.2:0.5.0.i-1016+1.18.2")
    modRuntimeOnly "maven.modrinth:lithium:mc1.18.2-0.10.3"
    modRuntimeOnly "maven.modrinth:indium:1.0.7+mc1.18.2"

    /*
    // for immersive portals compat
    modRuntimeOnly ('com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:v1.4.11-1.18'){ //temp immersiveportals
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }
    modRuntimeOnly ('com.github.qouteall.ImmersivePortalsMod:q_misc_util:v1.4.11-1.18'){ //temp immersiveportals
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }
    */

    // needed for resource loading
    include(modImplementation(fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version)))
    // commands also needs base
    include(modImplementation(fabricApi.module("fabric-api-base", rootProject.fabric_api_version)))
    include(modImplementation(fabricApi.module("fabric-command-api-v1", rootProject.fabric_api_version)))

    include(implementation('com.electronwill.night-config:toml:3.6.6'))
    include(implementation('com.electronwill.night-config:core:3.6.6'))

    include(implementation("org.lwjgl:lwjgl-openvr:3.2.2"))
    include(implementation("org.lwjgl:lwjgl-openvr:3.2.2:natives-linux"))
    include(implementation("org.lwjgl:lwjgl-openvr:3.2.2:natives-macos"))
    include(implementation("org.lwjgl:lwjgl-openvr:3.2.2:natives-windows"))

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

remapJar {
    archiveClassifier.set('fabric')
}

jar {
    classifier "dev"
    manifest {
        attributes(
                'Main-Class': "org.vivecraft.LaunchPopup"
        )
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
